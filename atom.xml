<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lilac&#39;s Blog</title>
  
  <subtitle>Struggle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lilac18.cn/"/>
  <updated>2020-03-28T08:32:41.089Z</updated>
  <id>https://lilac18.cn/</id>
  
  <author>
    <name>Lilac</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WR20-3-28</title>
    <link href="https://lilac18.cn/2020/03/28/WR20-3-28/"/>
    <id>https://lilac18.cn/2020/03/28/WR20-3-28/</id>
    <published>2020-03-28T07:51:49.000Z</published>
    <updated>2020-03-28T08:32:41.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本周工作"><a href="#本周工作" class="headerlink" title="本周工作"></a>本周工作</h3><p>1，合约部署的报错属于BUG，web3和最新的Solidity会出现Bug。Github报错大多数都是不同版本，没有有效的解决办法。当前web3仍然问题很多，等待Web3更新。最终只能切换0.4版本的Solidity，没有出现报错。但是0.4版本的Solidity很旧问题很多，只能作为学习。</p><p>2，GANACHE未找到可以真正本地存储的方法。现存的本地存储上次状态都是存储到内存或者存储为临时文件，并没有实际的区块保存，因此只能像在线Remix网络一样作为测试合约可用性的的测试网络。</p><p>3，分配单机多节点测试以太坊网络。区块同步比预想要效率低下。</p><p>4，从头仔细学习Solidity。加深对一些概念的理解</p><p>5，当前的学习和Dapp开发有较大差异，寻找继续的方向。</p><p>6，做读取大文件测试。学习python读取大文件CSV文件。pandas和dask.dataframe相关学习。</p><h3 id="论文阅读"><a href="#论文阅读" class="headerlink" title="论文阅读"></a>论文阅读</h3><h3 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h3><p>1，寻找并学习DAPP开发实例，目的是加深对合约开发的理解。</p><p>2，Nodejs寻找合适的框架进行实践，提高解决问题能力。</p><p>3，专注于Solidity的学习。</p><p>4，公链开发和私链开发区别较大，进行了解。</p>]]></content>
    
    <summary type="html">
    
      周报 20-3-28
    
    </summary>
    
    
      <category term="week report" scheme="https://lilac18.cn/categories/week-report/"/>
    
    
  </entry>
  
  <entry>
    <title>WR20-3-21</title>
    <link href="https://lilac18.cn/2020/03/21/WR20-3-21/"/>
    <id>https://lilac18.cn/2020/03/21/WR20-3-21/</id>
    <published>2020-03-21T08:00:50.000Z</published>
    <updated>2020-03-21T08:53:47.636Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本周工作"><a href="#本周工作" class="headerlink" title="本周工作"></a>本周工作</h3><p>1，web3和Truffle分别测试部署简单合约到GANACHE没出现问题。但是部署到实际的Geth发现问题。更改web3版本和部署代码及Geth版本，问题未得到解决，资料较少，打算重新部署Geth进行尝试。</p><p>2，GANACHE要作为测试链优点是少去了的挖矿打包的过程，缺点是是模拟的每次重启会刷新。</p><p>3，web3 1.0学习，Nodejs学习。</p><h3 id="论文阅读"><a href="#论文阅读" class="headerlink" title="论文阅读"></a>论文阅读</h3><h4 id="FastKitten-Practical-Smart-Contracts-on-Bitcoin-USENIX-2019"><a href="#FastKitten-Practical-Smart-Contracts-on-Bitcoin-USENIX-2019" class="headerlink" title="FastKitten: Practical Smart Contracts on Bitcoin (USENIX 2019)"></a>FastKitten: Practical Smart Contracts on Bitcoin (USENIX 2019)</h4><p><strong>问题描述：</strong>区块链上的智能合约本质上是区块链上的代码，能够进行逻辑运算。比如可以使用智能合约实现上图所示的扑克牌游戏，三个玩家分别向智能合约输入自己的牌，然后智能合约进行逻辑运算，确定赢家，输出结果。但是当前区块链最成功的应用之一比特币不支持智能合约。是否可以让比特币网络支持智能合约？</p><p><strong>论文贡献</strong>本论文针对比特币网络提出了一个能够在链外执行（off-chain execution）且能执行多个轮回（multi-round）的高效的智能合约协议FastKitten，它具有强的隐私和安全性以及速度快的特点。</p><p><strong>主体方案</strong></p><p><em>1 可执行环境</em></p><p>​        一个理想的TEE可以理解为一个沙盒，任何人都不能改变和窥探里面的执行逻辑和状态信息。一个TEE能够保证其中的逻辑代码被正确执行，维护其中的隐私状态，并且能够提供TEE中的程序被正确设置的证明。</p><p><em>2 FastKitten协议</em></p><p>​        该协议可以分为四个主体，分别为TEE，Operator，Parties和区块链。可以把TEE理解为一台特殊的服务器，Operator便是这台服务器的拥有者；Parties是活动的参与者，比如打扑克牌的三个人；区块链就是比特币中的区块链。FastKitten协议分为三个阶段。 </p><p>（1）(1)  Setup阶段</p><p>​        Operator提交惩罚押金给智能合约。把Operator的惩罚押金转给每一个parties，但是它time-lock的，只有到了timeout的时间之后，该交易的输出金额才能被parties花费掉。对于各个Party，她们通过验证Operator发过来的数据，知道Operator已经提交了押金，以及TEE已经设置好了。于是她们向智能合约提交惩罚押金。</p><p>（2）Round阶段</p><p>1）各个parties通过Operator向TEE发送智能合约的输入数据，</p><p>2）TEE计算得到结果，</p><p>3）通过Operator向各个parties返回TEE的计算结果。</p><p>​        这个过程可以根据需要重复多次。所有在网络中传输的数据都通过程TLS来加密，因此Operator无法知道parties的输入内容和TEE的计算结果。round阶段不用访问区块链的。</p><p>（3）finalize阶段</p><p>​        上一个阶段智能合约执行了其中的代码逻辑，得到了扑克牌游戏的赢家，需要发布结果。Operator通过TEE的最终计算结果的输出向区块链发起一个交易，用于向Operator和各个parties退还押金以及向赢家发送相关报酬等。这一步的操作写到区块链中，防止篡改和欺骗。</p><p><strong>作恶</strong>  </p><p>​    可以归结为两种，一种是篡改数据，第二种是丢弃数据或者故意停止工作。前者可以通过数字签名来解决。论文主要讲解后者。</p><p>（1）   情况1，operator作恶</p><p>如果Operator故意丢弃数据或者故意停止服务，那么其之前所提交的押金在timeout之后被各个parties消费掉，以此来惩罚operator。</p><p>（2）   情况2，party作恶</p><p>​        比如Alice故意停止工作，没有给Operator发送TEE所需要的input数据。这时候TEE没有收到Alice的input数据，但是TEE不确定是Operator丢弃了该数据还是Alice没有发送。Operator为了证明自己的清白，它向区块链发起一个challenge交易，该交易的输入是Operator自己的一些未花费的钱，输出是Alice的地址，并且有一个数据域Data，里面存储了在当前round中TEE计算结果的输出值 。如果Alice没有作恶，只是她发给Operator的input数据在网络传输途中丢失了。这时候，Alice需要证明自己的清白，需要回应Operator所发起的challenge交易。Alice需要时时检查有没有发给自己的challenge交易，如果有，需要向区块链发起一个交易，作为对应challenge交易的回应。该response交易的输入是Operator发给Alice的钱，输出是Operator的地址，目的是把这个钱返还给Operator，并且其数据域Data是发送给TEE的input数据。这样，Operator检查到Alice的回应之后，就能够从区块链中拿到这个input数据，然后转发给TEE，TEE正常执行。如果在Operator发起 过了一定的时间之后Alice还是没有反应，那么TEE中的智能合约就能够断定Alice作恶，因此没收Alice的押金，结束协议。</p><p>​        没收Alice的押金：通过向区块链发起一个交易,其输出包含Operator的地址和除了Alice的其它parties的地址。</p><h3 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h3><p>1，Solidity学习不够深入，需强化理解本质。</p><p>2，解决当前部署遇到的问题。</p><p>3，GANACHE的本地存储。</p>]]></content>
    
    <summary type="html">
    
      周报 20-3-21
    
    </summary>
    
    
      <category term="week report" scheme="https://lilac18.cn/categories/week-report/"/>
    
    
  </entry>
  
  <entry>
    <title>WR20-3-14</title>
    <link href="https://lilac18.cn/2020/03/14/WR20-3-14/"/>
    <id>https://lilac18.cn/2020/03/14/WR20-3-14/</id>
    <published>2020-03-14T02:19:12.000Z</published>
    <updated>2020-03-14T03:01:58.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本周工作"><a href="#本周工作" class="headerlink" title="本周工作"></a>本周工作</h3><p>1，web3新版官方文档学习。发现web3版本冲突的问题，之前旧版本的0.2.0。新版本1.0.0改动较大。涉及到异步和合约编译部署及区块链交互的地方更改较多，网上教程杂乱，选择官方文档选择性学习。</p><p>2，学习solidity官方文档的常见模式。之前solidity学习基本语法和实例略过了一些语言特性。关于solidity的提款模式和限制模式进一步学习。整体感觉solidity虽然可以在EVM编程，但实际限制很多，大多数人利用solidity开发dapp。</p><p>3，学习Truffle的使用方法及应用流程。可以极大程度简化合约编译和部署。但是更多倾向于类似于前端的Dapp开发。后续根据需求决定采用与否。</p><p>4，之前的区块链以node作为服务端，通过写入写出的智能合约与以太坊交互。好处是可以解耦合。现在可以直接利用web3与区块链写入写出。后续考虑采取哪种方式。</p><p>5，发现web3更偏向于nodejs。补充学习，和js更多的是语法上相同，但实际的用法差异较大。</p><h3 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h3><p>1，继续学习web3 1.0官方文档</p><p>2，寻找更加便捷好用的solidity开发工具</p><p>3，了解GANACHE，当前部署和测试直接在私有链进行，打算利用GANACHE作为测试私有链，了解并测试考虑可用性</p><p>4，针对时间完善Truffle学习，了解Dapp。</p>]]></content>
    
    <summary type="html">
    
      周报 20-3-14
    
    </summary>
    
    
      <category term="week report" scheme="https://lilac18.cn/categories/week-report/"/>
    
    
  </entry>
  
  <entry>
    <title>WR20-3-7</title>
    <link href="https://lilac18.cn/2020/03/07/WR20-3-7/"/>
    <id>https://lilac18.cn/2020/03/07/WR20-3-7/</id>
    <published>2020-03-07T07:38:04.000Z</published>
    <updated>2020-03-07T09:05:56.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="科研工作"><a href="#科研工作" class="headerlink" title="科研工作"></a>科研工作</h3><span class="label success">1,web3接口学习</span><p>remix比本地solc编译器简单易用，但是利用remix开发会比较繁琐。利用web3对合约进行编译、部署、测试。寻求更为实用的开发框架和环境。</p><span class="label success">2,solidity学习</span><p>结合实例进一步学习。</p><span class="label success">3,思考学姐方案需求，进行简单gas花费测试</span><p>对存储简单状态变量进行测试，影响gas的诸多因素没考虑清楚，测试结果只能作为参考。</p><span class="label success">3,阅读论文</span><p>《The mathematics of bitcoin》2020未发表。</p><p>本文是一篇偏数学的文章。在数学的角度对比特币进行分析。引入了很多经济学的概念和形式化定义。鞅理论、马尔科夫链、戴克词等。1，挖矿。挖每个区块的时间服从指数分布，挖n个区块时间服从n重卷积指数分布。区块数和平均出块时间服从伽马分布。验证区块时间服从泊松分布。2，双花问题。整理前人结论，数学角度证明攻击成功率随着确认区块增加而减少。3，挖矿收益。挖矿策略的收益参考伽马分布值。证明了在难度值不变的情况下，最佳挖矿策略是尽快发布。4，难度值不可调控时最好的挖矿策略是尽快发布。文章之后讲的自私挖矿策略及戴克词等没太看懂。本文主要启发人们比特币中的数学问题。</p><h3 id="下周科研计划"><a href="#下周科研计划" class="headerlink" title="下周科研计划"></a>下周科研计划</h3><span class="label primary">了解Truffle框架并考虑实用性</span><br><span class="label primary">完善solidity学习，继续web3学习</span><br><span class="label primary">结合实例实践智能合约场景和web3</span>]]></content>
    
    <summary type="html">
    
      周报20.3.7
    
    </summary>
    
    
      <category term="week report" scheme="https://lilac18.cn/categories/week-report/"/>
    
    
  </entry>
  
  <entry>
    <title>image-test</title>
    <link href="https://lilac18.cn/2020/02/24/image-test/"/>
    <id>https://lilac18.cn/2020/02/24/image-test/</id>
    <published>2020-02-24T08:53:53.000Z</published>
    <updated>2020-02-24T08:55:35.644Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://lilac-image-1301357031.cos.ap-chengdu.myqcloud.com/undefined/20200224165526-395579.jpeg" alt="1"></p>]]></content>
    
    <summary type="html">
    
      test image
    
    </summary>
    
    
      <category term="hexo" scheme="https://lilac18.cn/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>WR20-2-22</title>
    <link href="https://lilac18.cn/2020/02/24/WR20-2-22/"/>
    <id>https://lilac18.cn/2020/02/24/WR20-2-22/</id>
    <published>2020-02-24T07:43:00.000Z</published>
    <updated>2020-02-24T09:05:57.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本周科研工作"><a href="#本周科研工作" class="headerlink" title="本周科研工作"></a>本周科研工作</h3><span class="label success">1,实现了GBF原型</span><p>碰到的问题，秘密共享使用的是异或，存储非整型数据时需要想办法解决。初步采取hash投映为整型。由于证书的数据结构未知，且存储到布隆过滤器的表示方式未知，后续问题后续结合实际解决。</p><span class="label success">2,完成了以太坊部署</span><span class="label success">3,明白了Remix运行原理</span><span class="label success">4,阅读论文</span><p>《Xor Filters: Faster and Smaller Than Bloom and Cuckoo Filters》2019未发表。</p><p>本文构造了一个比布隆过滤器更快的异或过滤器。主要思路是：将集合S中所有元素x的指纹f(x)（由随机哈希函数生成）存放到数组B中。有三个哈希函数h0,h1,h2。三个哈希函数值域平分|B|（|B|&gt;|S|）。试图找到B[h0(x)] xor B[h1(x)] xor B[h2(x)]=f(x)。构造过程主要是利用一个临时数组H，选定一组h0,h1,h2,在H[h0(x)]、H[h1(x)]、H[h2(x)]存放x。集合S所有元素完成存放之后，找H中存放单个元素的位置，记录到一个队列里。遍历队列，将位置和元素存放到栈里。如果栈大小与S相同，进行存放。不成功重新选取哈希函数组。概括来说与元素x相关联的位置i为h0(x),h1(x),h2(x)之一。重新构造B，在i的位置存放f(x) xor B[h0(x)] xor B[h1(x)] xor B[h2(x)]。但是我感觉文中的几个算法有问题，逻辑想不通。尤其最后存放这一步很奇怪，我思考觉得有一定问题。</p><h3 id="下周科研计划"><a href="#下周科研计划" class="headerlink" title="下周科研计划"></a>下周科研计划</h3><span class="label primary">完成线下智能合约环境搭建</span><span class="label primary">完善JS学习，继续Solidity学习</span><span class="label primary">争取时间调研过滤器的应用场景</span>]]></content>
    
    <summary type="html">
    
      周报20.2.22
    
    </summary>
    
    
      <category term="week report" scheme="https://lilac18.cn/categories/week-report/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello,Hexo</title>
    <link href="https://lilac18.cn/2020/02/18/Hello/"/>
    <id>https://lilac18.cn/2020/02/18/Hello/</id>
    <published>2020-02-18T06:30:59.000Z</published>
    <updated>2020-02-24T09:05:16.954Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是我第一次使用博客，也是第一次使用markdown"><a href="#这是我第一次使用博客，也是第一次使用markdown" class="headerlink" title="这是我第一次使用博客，也是第一次使用markdown"></a>这是我第一次使用博客，也是第一次使用markdown</h3>]]></content>
    
    <summary type="html">
    
      first blog
    
    </summary>
    
    
      <category term="博客入门" scheme="https://lilac18.cn/categories/%E5%8D%9A%E5%AE%A2%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
</feed>
