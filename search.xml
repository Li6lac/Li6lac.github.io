<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WR20-3-7</title>
    <url>/2020/03/07/WR20-3-7/</url>
    <content><![CDATA[<h3 id="科研工作"><a href="#科研工作" class="headerlink" title="科研工作"></a>科研工作</h3><span class="label success">1,web3接口学习</span>

<p>remix比本地solc编译器简单易用，但是利用remix开发会比较繁琐。利用web3对合约进行编译、部署、测试。寻求更为实用的开发框架和环境。</p>
<span class="label success">2,solidity学习</span>

<p>结合案例进一步学习。</p>
<span class="label success">3,思考学姐方案需求，进行简单gas花费测试</span>

<p>对存储简单状态变量进行测试，影响gas的诸多因素没考虑清楚，测试结果只能作为参考。</p>
<span class="label success">3,阅读论文</span>

<p>《The mathematics of bitcoin》2020未发表。</p>
<p>本文是一篇偏数学的文章。在数学的角度对比特币进行分析。引入了很多经济学的概念和形式化定义。鞅理论、马尔科夫链、戴克词等。1，挖矿。挖每个区块的时间服从指数分布，挖n个区块时间服从n重卷积指数分布。区块数和平均出块时间服从伽马分布。验证区块时间服从泊松分布。2，双花问题。整理前人结论，数学角度证明攻击成功率随着确认区块增加而减少。3，挖矿收益。挖矿策略的收益参考伽马分布值。证明了在难度值不变的情况下，最佳挖矿策略是尽快发布。4，难度值不可调控时最好的挖矿策略是尽快发布。文章之后讲的自私挖矿策略及戴克词等没太看懂。本文主要启发人们比特币中的数学问题。</p>
<h3 id="下周科研计划"><a href="#下周科研计划" class="headerlink" title="下周科研计划"></a>下周科研计划</h3><span class="label primary">了解Truffle框架并考虑实用性</span><br>

<span class="label primary">完善solidity学习，继续web3学习</span><br>

<span class="label primary">结合实例实践智能合约场景和web3</span>]]></content>
      <categories>
        <category>week report</category>
      </categories>
  </entry>
  <entry>
    <title>image-test</title>
    <url>/2020/02/24/image-test/</url>
    <content><![CDATA[<p><img src="https://lilac-image-1301357031.cos.ap-chengdu.myqcloud.com/undefined/20200224165526-395579.jpeg" alt="1"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>WR20-2-22</title>
    <url>/2020/02/24/WR20-2-22/</url>
    <content><![CDATA[<h3 id="本周科研工作"><a href="#本周科研工作" class="headerlink" title="本周科研工作"></a>本周科研工作</h3><span class="label success">1,实现了GBF原型</span>

<p>碰到的问题，秘密共享使用的是异或，存储非整型数据时需要想办法解决。初步采取hash投映为整型。由于证书的数据结构未知，且存储到布隆过滤器的表示方式未知，后续问题后续结合实际解决。</p>
<span class="label success">2,完成了以太坊部署</span>

<span class="label success">3,明白了Remix运行原理</span>

<span class="label success">4,阅读论文</span>

<p>《Xor Filters: Faster and Smaller Than Bloom and Cuckoo Filters》2019未发表。</p>
<p>本文构造了一个比布隆过滤器更快的异或过滤器。主要思路是：将集合S中所有元素x的指纹f(x)（由随机哈希函数生成）存放到数组B中。有三个哈希函数h0,h1,h2。三个哈希函数值域平分|B|（|B|&gt;|S|）。试图找到B[h0(x)] xor B[h1(x)] xor B[h2(x)]=f(x)。构造过程主要是利用一个临时数组H，选定一组h0,h1,h2,在H[h0(x)]、H[h1(x)]、H[h2(x)]存放x。集合S所有元素完成存放之后，找H中存放单个元素的位置，记录到一个队列里。遍历队列，将位置和元素存放到栈里。如果栈大小与S相同，进行存放。不成功重新选取哈希函数组。概括来说与元素x相关联的位置i为h0(x),h1(x),h2(x)之一。重新构造B，在i的位置存放f(x) xor B[h0(x)] xor B[h1(x)] xor B[h2(x)]。但是我感觉文中的几个算法有问题，逻辑想不通。尤其最后存放这一步很奇怪，我思考觉得有一定问题。</p>
<h3 id="下周科研计划"><a href="#下周科研计划" class="headerlink" title="下周科研计划"></a>下周科研计划</h3><span class="label primary">完成线下智能合约环境搭建</span>

<span class="label primary">完善JS学习，继续Solidity学习</span>

<span class="label primary">争取时间调研过滤器的应用场景</span>]]></content>
      <categories>
        <category>week report</category>
      </categories>
  </entry>
  <entry>
    <title>Hello,Hexo</title>
    <url>/2020/02/18/Hello/</url>
    <content><![CDATA[<h3 id="这是我第一次使用博客，也是第一次使用markdown"><a href="#这是我第一次使用博客，也是第一次使用markdown" class="headerlink" title="这是我第一次使用博客，也是第一次使用markdown"></a>这是我第一次使用博客，也是第一次使用markdown</h3>]]></content>
      <categories>
        <category>博客入门</category>
      </categories>
  </entry>
</search>
